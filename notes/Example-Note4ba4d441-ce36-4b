{"type":"doc","content":[{"type":"heading","attrs":{"textAlign":"left","id":"heading-1","level":1},"content":[{"type":"text","text":"Backtracking "}]},{"type":"heading","attrs":{"textAlign":"left","id":"heading-2","level":2},"content":[{"type":"text","text":"String Partitioning"}]},{"type":"bulletList","attrs":{"tight":true},"content":[{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","text":"Partition a string into all possible substrings"}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","text":"Uses recursive calls to partition and check whatever valid condition needs to be checked (eg. is a palindrome, is present in a dictionary etc.)"}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","text":"Example Problems "}]},{"type":"table","content":[{"type":"tableRow","content":[{"type":"tableHeader","attrs":{"colspan":1,"rowspan":1,"colwidth":null},"content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","text":"Problem"}]}]},{"type":"tableHeader","attrs":{"colspan":1,"rowspan":1,"colwidth":null},"content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","text":"Link"}]}]}]},{"type":"tableRow","content":[{"type":"tableCell","attrs":{"colspan":1,"rowspan":1,"colwidth":null},"content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","text":"Palindrome Partitioning"}]}]},{"type":"tableCell","attrs":{"colspan":1,"rowspan":1,"colwidth":null},"content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"link","attrs":{"href":"https://leetcode.com/problems/palindrome-partitioning/description/","target":"_blank","rel":"noopener noreferrer nofollow","class":null}}],"text":"https://leetcode.com/problems/palindrome-partitioning/description/"}]}]}]},{"type":"tableRow","content":[{"type":"tableCell","attrs":{"colspan":1,"rowspan":1,"colwidth":null},"content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","text":"Word Break II"}]}]},{"type":"tableCell","attrs":{"colspan":1,"rowspan":1,"colwidth":null},"content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"link","attrs":{"href":"https://leetcode.com/problems/word-break-ii/description/","target":"_blank","rel":"noopener noreferrer nofollow","class":null}}],"text":"https://leetcode.com/problems/word-break-ii/description/"}]}]}]}]}]}]},{"type":"codeBlock","attrs":{"language":"python","collapsed":false},"content":[{"type":"text","text":"result = []\nn = len(s)\n\ndef backtrack(curr_partition, start):\n    if start == n:\n        result.append(curr_partition)\n        return\n    \n    for end in range(start + 1, n + 1):\n        substring = s[start:end]\n        if is_valid_substring(substring): #is_valid_substring changes with the type of problem at hand\n            curr_partition.append(substring)\n            backtrack(curr_partition, end) #Can also use backtrack(curr_partition + [substring], end)\n            curr_partition.pop()\n\nbacktrack([], 0)\nreturn result"}]},{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"code"}],"text":"result"},{"type":"text","text":": A list to store all the valid partitions."}]},{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"code"}],"text":"backtrack"},{"type":"text","marks":[{"type":"bold"}],"text":" Function"},{"type":"text","text":": A helper function that performs the actual backtracking."}]},{"type":"bulletList","attrs":{"tight":true},"content":[{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"code"}],"text":"curr_partition"},{"type":"text","text":": The current partition being constructed."}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"code"}],"text":"start"},{"type":"text","text":": The starting index for partitioning the string."}]}]}]},{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Base Case"},{"type":"text","text":": If "},{"type":"text","marks":[{"type":"code"}],"text":"start"},{"type":"text","text":" reaches the end of the string ("},{"type":"text","marks":[{"type":"code"}],"text":"n"},{"type":"text","text":"), we add the current partition to the result."}]},{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Recursive Case"},{"type":"text","text":": We iterate through possible end indices ("},{"type":"text","marks":[{"type":"code"}],"text":"end"},{"type":"text","text":"), generate substrings from "},{"type":"text","marks":[{"type":"code"}],"text":"start"},{"type":"text","text":" to "},{"type":"text","marks":[{"type":"code"}],"text":"end"},{"type":"text","text":", and check if they are valid using the "},{"type":"text","marks":[{"type":"code"}],"text":"is_valid_substring"},{"type":"text","text":" function. If valid, we recursively call "},{"type":"text","marks":[{"type":"code"}],"text":"backtrack"},{"type":"text","text":" with the new substring added to the current partition. After the recursive call, we backtrack by removing the last added substring."}]}]}