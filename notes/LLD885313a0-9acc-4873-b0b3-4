{"type":"doc","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"RoadMap"}]},{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","text":"Classes - Methods, Attributes, Class Variables, Class Methods 2) OOPS concepts - Abstraction, Polymorphism, Encapsulation, Inheritance 3) super() method 4) Design Principles - SOLID, DRY, KISS, YAGNI 5) Design Patterns - Only important ones - Singleton, Factory Method, Builder, Strategy, Observer 6) Importants concepts/classes to know - Unique ID generation, Desgining Rate Limiter (Token bucket, fixed window), Caching (LRU, LFU), Queue management (Asynchronous Processing of Tasks, Desiognning notifications Systems using message queue/observer patterns), time based schedulers like crons jobs, load balancing algorithms, Data Paginiation and limtiing results, Search and Fileting, Acces contro and permissions, Handling concurrency and synchronization"}]},{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Important Questions to Practice:"}]},{"type":"orderedList","attrs":{"tight":true,"start":1},"content":[{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Pizza Shop Question"}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Unix/linux File search question"}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"LRU Cache (Indirect uses too), with TTL"}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"LFU Cache"}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Hotel Booking/Management System "}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"},{"type":"textStyle","attrs":{"fontFamily":"-apple-system, system-ui, Segoe UI, Roboto, Helvetica Neue, Arial, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol, sans-serif","color":"rgb(51, 61, 66)","fontSize":"14"}}],"text":"elevator system in a building"}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"},{"type":"highlight","attrs":{"color":"#ffe066"}}],"text":"Parking Lot Design"}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Load Balancer"}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"File Management System"}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"URL shortner"}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Income Calculator"}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Hashtable"}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Amazon Locker System"}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Amazon Package Delivery System"}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Amazon Validation of a Purchase class"}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Design Calendar"}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Abstract Data structure that supports find/add/retrieve/delete etc."}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Custom collection class - getRandome, add, retrieve etc. "}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Find Connected id given list of id's (friends, their tastes etc.)"}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Historical search terms by frequency of search (Trie)"}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"API Gateway"}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Games - Chess Game, Snake and Ladder, Wordle, Spell Bee, Sudoku etc."}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Rate Limiter "}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Common LLD Questions - Library, Vending Machine, Amazon Online shopping System, Movie ticket booking etc. "}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Notification System LLD"}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Most frequent/vs least frequent in huge database - heap internals/Trie"}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Autocomplete - Trie"}]}]}]},{"type":"heading","attrs":{"textAlign":"left","id":"heading-1","level":1},"content":[{"type":"text","text":"Classes and Methods"}]},{"type":"heading","attrs":{"textAlign":"left","id":"heading-2","level":3},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Class Definition and Initialization"}]},{"type":"bulletList","attrs":{"tight":true},"content":[{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Classes"},{"type":"text","text":" are the blueprint for creating objects in Python."}]}]}]},{"type":"codeBlock","attrs":{"language":"python","collapsed":false},"content":[{"type":"text","text":"class MyClass:\n    def __init__(self, attribute1, attribute2):\n        self.attribute1 = attribute1  # Instance variable\n        self.attribute2 = attribute2\n\n# Creating an object\nobj = MyClass(\"value1\", \"value2\")"}]},{"type":"heading","attrs":{"textAlign":"left","id":"heading-3","level":3},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Instance Variables and Methods"}]},{"type":"bulletList","attrs":{"tight":true},"content":[{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Instance variables"},{"type":"text","text":" are specific to each object."}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Instance methods"},{"type":"text","text":" operate on instance variables."}]}]}]},{"type":"codeBlock","attrs":{"language":"python","collapsed":false},"content":[{"type":"text","text":"class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def greet(self):\n        return f\"Hello, my name is {self.name} and I am {self.age} years old.\"\n\n# Example usage\np = Person(\"Alice\", 25)\nprint(p.greet())  # Output: Hello, my name is Alice and I am 25 years old."}]},{"type":"heading","attrs":{"textAlign":"left","id":"heading-4","level":3},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Class Variables and Class Methods"}]},{"type":"bulletList","attrs":{"tight":true},"content":[{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Class variables"},{"type":"text","text":" are shared among all instances of a class."}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Class methods"},{"type":"text","text":" operate on class variables and are denoted with "},{"type":"text","marks":[{"type":"code"}],"text":"@classmethod"},{"type":"text","text":"."}]}]}]},{"type":"codeBlock","attrs":{"language":"python","collapsed":false},"content":[{"type":"text","text":"class Counter:\n    count = 0  # Class variable\n\n    @classmethod\n    def increment(cls):\n        cls.count += 1\n\n# Example usage\nCounter.increment()\nprint(Counter.count)  # Output: 1"}]},{"type":"heading","attrs":{"textAlign":"left","id":"heading-5","level":3},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Static Methods"}]},{"type":"bulletList","attrs":{"tight":true},"content":[{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Static methods"},{"type":"text","text":" do not operate on class or instance variables. They are utility functions within a class."}]}]}]},{"type":"codeBlock","attrs":{"language":"python","collapsed":false},"content":[{"type":"text","text":"class MathUtils:\n    @staticmethod\n    def add(a, b):\n        return a + b\n\n# Example usage\nprint(MathUtils.add(5, 3))  # Output: 8"}]},{"type":"heading","attrs":{"textAlign":"left","id":"heading-6","level":1},"content":[{"type":"text","text":"OOP Concepts"}]},{"type":"heading","attrs":{"textAlign":"left","id":"heading-7","level":3},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Inheritance"}]},{"type":"bulletList","attrs":{"tight":true},"content":[{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","text":"Use inheritance to create a hierarchy of classes."}]}]}]},{"type":"codeBlock","attrs":{"language":"python","collapsed":false},"content":[{"type":"text","text":"class Animal:\n    def speak(self):\n        return \"I make a sound\"\n\nclass Dog(Animal):  # Dog inherits from Animal\n    def speak(self):\n        return \"Woof!\"\n\n# Example usage\ndog = Dog()\nprint(dog.speak())  # Output: Woof!"}]},{"type":"heading","attrs":{"textAlign":"left","id":"heading-8","level":3},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Encapsulation"}]},{"type":"bulletList","attrs":{"tight":true},"content":[{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","text":"Use "},{"type":"text","marks":[{"type":"bold"}],"text":"private variables"},{"type":"text","text":" to restrict access to attributes."}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","text":"Prefix variables with "},{"type":"text","marks":[{"type":"code"}],"text":"_"},{"type":"text","text":" (protected) or "},{"type":"text","marks":[{"type":"code"}],"text":"__"},{"type":"text","text":" (private)."}]}]}]},{"type":"codeBlock","attrs":{"language":"python","collapsed":false},"content":[{"type":"text","text":"class BankAccount:\n    def __init__(self, balance):\n        self.__balance = balance  # Private variable\n\n    def get_balance(self):\n        return self.__balance\n\n# Example usage\naccount = BankAccount(100)\nprint(account.get_balance())  # Output: 100"}]},{"type":"heading","attrs":{"textAlign":"left","id":"heading-9","level":3},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Polymorphism"}]},{"type":"bulletList","attrs":{"tight":true},"content":[{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","text":"Same interface but different implementations."}]}]}]},{"type":"codeBlock","attrs":{"language":"python","collapsed":false},"content":[{"type":"text","text":"class Animal:\n    def speak(self):\n        return \"Some sound\"\n\nclass Dog(Animal):\n    def speak(self):\n        return \"Woof!\"\n\nclass Cat(Animal):\n    def speak(self):\n        return \"Meow!\"\n\n# Example usage\nanimals = [Dog(), Cat()]\nfor animal in animals:\n    print(animal.speak())  # Output: Woof! Meow!"}]},{"type":"heading","attrs":{"textAlign":"left","id":"heading-10","level":3},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Abstraction"}]},{"type":"bulletList","attrs":{"tight":true},"content":[{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","text":"Use abstract classes to define methods that must be implemented in derived classes."}]}]}]},{"type":"codeBlock","attrs":{"language":"python","collapsed":false},"content":[{"type":"text","text":"from abc import ABC, abstractmethod\n\nclass Shape(ABC):\n    @abstractmethod\n    def area(self):\n        pass\n\nclass Rectangle(Shape):\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\n    def area(self):\n        return self.width * self.height\n\n# Example usage\nrect = Rectangle(5, 10)\nprint(rect.area())  # Output: 50"}]},{"type":"heading","attrs":{"textAlign":"left","id":"heading-11","level":2},"content":[{"type":"text","text":"Some Syntax Bits"}]},{"type":"heading","attrs":{"textAlign":"left","id":"heading-12","level":3},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Method Overloading (Default Arguments)"}]},{"type":"bulletList","attrs":{"tight":true},"content":[{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","text":"Python doesn't support true method overloading, but you can simulate it using default arguments."}]}]}]},{"type":"codeBlock","attrs":{"language":"python","collapsed":false},"content":[{"type":"text","text":"class Math:\n    def add(self, a, b=0, c=0):\n        return a + b + c\n\n# Example usage\nmath = Math()\nprint(math.add(5))        # Output: 5\nprint(math.add(5, 3))     # Output: 8\nprint(math.add(5, 3, 2))  # Output: 10"}]},{"type":"heading","attrs":{"textAlign":"left","id":"heading-13","level":3},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Method Overriding"}]},{"type":"bulletList","attrs":{"tight":true},"content":[{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","text":"Redefine a method from the parent class in the child class."}]}]}]},{"type":"codeBlock","attrs":{"language":"python","collapsed":false},"content":[{"type":"text","text":"class Parent:\n    def greet(self):\n        return \"Hello from Parent\"\n\nclass Child(Parent):\n    def greet(self):\n        return \"Hello from Child\"\n\n# Example usage\nchild = Child()\nprint(child.greet())  # Output: Hello from Child"}]},{"type":"heading","attrs":{"textAlign":"left","id":"heading-14","level":1},"content":[{"type":"text","text":"Design Principles"}]},{"type":"heading","attrs":{"textAlign":"left","id":"heading-15","level":2},"content":[{"type":"text","text":"SOLID Principles"}]},{"type":"orderedList","attrs":{"tight":false,"start":1},"content":[{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Single Responsibility Principle (SRP)"},{"type":"text","text":":"}]},{"type":"bulletList","attrs":{"tight":false},"content":[{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Definition"},{"type":"text","text":": A class should have only one reason to change, meaning it should only have one job."}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Example"},{"type":"text","text":":"}]},{"type":"codeBlock","attrs":{"language":"python","collapsed":false},"content":[{"type":"text","text":"class Invoice:\n    def __init__(self, items):\n        self.items = items\n\n    def calculate_total(self):\n        return sum(self.items)\n\nclass InvoicePrinter:\n    def print_invoice(self, invoice):\n        print(f\"Invoice Total: {invoice.calculate_total()}\")"}]},{"type":"bulletList","attrs":{"tight":false},"content":[{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Why"},{"type":"text","text":": Separates the responsibilities of calculating and printing the invoice."}]}]}]}]}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Open/Closed Principle (OCP)"},{"type":"text","text":":"}]},{"type":"bulletList","attrs":{"tight":false},"content":[{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Definition"},{"type":"text","text":": A class should be open for extension but closed for modification."}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Example"},{"type":"text","text":":"}]},{"type":"codeBlock","attrs":{"language":"python","collapsed":false},"content":[{"type":"text","text":"class Discount:\n    def apply_discount(self, price):\n        return price\n\nclass PercentageDiscount(Discount):\n    def __init__(self, percent):\n        self.percent = percent\n\n    def apply_discount(self, price):\n        return price * (1 - self.percent / 100)"}]},{"type":"bulletList","attrs":{"tight":false},"content":[{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Why"},{"type":"text","text":": New discount types can be added by extending the "},{"type":"text","marks":[{"type":"code"}],"text":"Discount"},{"type":"text","text":" class without modifying existing code."}]}]}]}]}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Liskov Substitution Principle (LSP)"},{"type":"text","text":":"}]},{"type":"bulletList","attrs":{"tight":false},"content":[{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Definition"},{"type":"text","text":": Subtypes must be substitutable for their base types."}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Example"},{"type":"text","text":":"}]},{"type":"codeBlock","attrs":{"language":"python","collapsed":false},"content":[{"type":"text","text":"class Bird:\n    def fly(self):\n        pass\n\nclass Sparrow(Bird):\n    def fly(self):\n        print(\"Sparrow flying\")\n\ndef make_bird_fly(bird):\n    bird.fly()\n\nmake_bird_fly(Sparrow())  # Works correctly"}]},{"type":"bulletList","attrs":{"tight":false},"content":[{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Why"},{"type":"text","text":": Subclasses like "},{"type":"text","marks":[{"type":"code"}],"text":"Sparrow"},{"type":"text","text":" can replace "},{"type":"text","marks":[{"type":"code"}],"text":"Bird"},{"type":"text","text":" without breaking functionality."}]}]}]}]}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Interface Segregation Principle (ISP)"},{"type":"text","text":":"}]},{"type":"bulletList","attrs":{"tight":false},"content":[{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Definition"},{"type":"text","text":": A class should not be forced to implement interfaces it does not use."}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Example"},{"type":"text","text":":"}]},{"type":"codeBlock","attrs":{"language":"python","collapsed":false},"content":[{"type":"text","text":"class Printer:\n    def print(self):\n        pass\n\nclass Scanner:\n    def scan(self):\n        pass\n\nclass AllInOneMachine(Printer, Scanner):\n    def print(self):\n        print(\"Printing...\")\n\n    def scan(self):\n        print(\"Scanning...\")"}]},{"type":"bulletList","attrs":{"tight":false},"content":[{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Why"},{"type":"text","text":": The interfaces are split into "},{"type":"text","marks":[{"type":"code"}],"text":"Printer"},{"type":"text","text":" and "},{"type":"text","marks":[{"type":"code"}],"text":"Scanner"},{"type":"text","text":", so classes only implement what they need."}]}]}]}]}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Dependency Inversion Principle (DIP)"},{"type":"text","text":":"}]},{"type":"bulletList","attrs":{"tight":false},"content":[{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Definition"},{"type":"text","text":": High-level modules should not depend on low-level modules. Both should depend on abstractions."}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Example"},{"type":"text","text":":"}]},{"type":"codeBlock","attrs":{"language":"python","collapsed":false},"content":[{"type":"text","text":"class Database:\n    def save(self, data):\n        pass\n\nclass MySQLDatabase(Database):\n    def save(self, data):\n        print(\"Saving data to MySQL\")\n\nclass Application:\n    def __init__(self, database: Database):\n        self.database = database\n\n    def store_data(self, data):\n        self.database.save(data)\n\napp = Application(MySQLDatabase())\napp.store_data(\"Sample data\")"}]},{"type":"bulletList","attrs":{"tight":false},"content":[{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Why"},{"type":"text","text":": The "},{"type":"text","marks":[{"type":"code"}],"text":"Application"},{"type":"text","text":" class depends on the abstraction "},{"type":"text","marks":[{"type":"code"}],"text":"Database"},{"type":"text","text":", not on the concrete implementation."}]}]}]}]}]}]}]},{"type":"heading","attrs":{"textAlign":"left","id":"heading-16","level":2},"content":[{"type":"text","text":"DRY (Don’t Repeat Yourself)"}]},{"type":"bulletList","attrs":{"tight":false},"content":[{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Definition"},{"type":"text","text":": Avoid duplicating code by abstracting common functionality."}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Example"},{"type":"text","text":":"}]},{"type":"codeBlock","attrs":{"language":"python","collapsed":false},"content":[{"type":"text","text":"def calculate_area(length, width):\n    return length * width\n\nclass Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n\n    def area(self):\n        return calculate_area(self.length, self.width)"}]}]}]},{"type":"heading","attrs":{"textAlign":"left","id":"heading-17","level":2},"content":[{"type":"text","text":"KISS (Keep It Simple, Stupid)"}]},{"type":"bulletList","attrs":{"tight":false},"content":[{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Definition"},{"type":"text","text":": Keep designs simple and avoid unnecessary complexity."}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Example"},{"type":"text","text":":"}]},{"type":"codeBlock","attrs":{"language":"python","collapsed":false},"content":[{"type":"text","text":"def add(a, b):\n    return a + b"}]},{"type":"bulletList","attrs":{"tight":false},"content":[{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","text":"Avoid overengineering a simple addition function."}]}]}]}]}]},{"type":"heading","attrs":{"textAlign":"left","id":"heading-18","level":2},"content":[{"type":"text","text":"YAGNI (You Aren’t Gonna Need It)"}]},{"type":"bulletList","attrs":{"tight":false},"content":[{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Definition"},{"type":"text","text":": Don’t implement functionality until it’s actually required."}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Example"},{"type":"text","text":":"}]},{"type":"codeBlock","attrs":{"language":"python","collapsed":false},"content":[{"type":"text","text":"class Feature:\n    def useful_function(self):\n        print(\"This is useful now.\")"}]},{"type":"bulletList","attrs":{"tight":false},"content":[{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","text":"Avoid adding speculative methods or features \"just in case\" they are needed later."}]}]}]}]}]},{"type":"heading","attrs":{"textAlign":"left","id":"heading-19","level":1},"content":[{"type":"text","text":"DESIGN PATTERNS (Only Important Ones)"}]},{"type":"heading","attrs":{"textAlign":"left","id":"heading-20","level":2},"content":[{"type":"text","text":"1. Singleton Pattern"}]},{"type":"bulletList","attrs":{"tight":true},"content":[{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Purpose"},{"type":"text","text":": Ensures that a class has only one instance and provides a global access point to it."}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Key Use Cases"},{"type":"text","text":": Configuration managers, database connections, logging systems."}]}]}]},{"type":"codeBlock","attrs":{"language":"python","collapsed":false},"content":[{"type":"text","text":"class Singleton:\n    _instance = None\n\n    def __new__(cls):\n        if not cls._instance:\n            cls._instance = super().__new__(cls)\n        return cls._instance\n\n# Usage\ns1 = Singleton()\ns2 = Singleton()\nprint(s1 is s2)  # True"}]},{"type":"heading","attrs":{"textAlign":"left","id":"heading-21","level":2},"content":[{"type":"text","text":"2. Factory Method Pattern"}]},{"type":"bulletList","attrs":{"tight":true},"content":[{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Purpose"},{"type":"text","text":": Creates objects without specifying the exact class. Lets subclasses decide which class to instantiate."}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Key Use Cases"},{"type":"text","text":": When a method must return objects of different types based on conditions."}]}]}]},{"type":"codeBlock","attrs":{"language":"python","collapsed":false},"content":[{"type":"text","text":"from abc import ABC, abstractmethod\n\nclass Notification(ABC):\n    @abstractmethod\n    def send(self, message):\n        pass\n\nclass EmailNotification(Notification):\n    def notify(self):\n        print(\"Sending Email Notification\")\n\nclass SMSNotification(Notification):\n    def notify(self):\n        print(\"Sending SMS Notification\")\n\nclass NotificationFactory:\n    @staticmethod\n    def create_notification(type_):\n        if type_ == \"email\":\n            return EmailNotification()\n        elif type_ == \"sms\":\n            return SMSNotification()\n        else:\n            raise ValueError(\"Invalid notification type\")\n\n# Usage\nfactory = NotificationFactory()\nnotification = factory.create_notification(\"email\")\nnotification.notify()  # Output: Sending Email Notification"}]},{"type":"heading","attrs":{"textAlign":"left","id":"heading-22","level":2},"content":[{"type":"text","text":"3. Builder Pattern"}]},{"type":"bulletList","attrs":{"tight":true},"content":[{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Purpose"},{"type":"text","text":": Constructs complex objects step by step, separating construction logic from the representation."}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Key Use Cases"},{"type":"text","text":": Building objects with multiple optional parameters."}]}]}]},{"type":"codeBlock","attrs":{"language":"python","collapsed":false},"content":[{"type":"text","text":"class House:\n    def __init__(self):\n        self.rooms = 0\n        self.garage = False\n        self.swimming_pool = False\n\n    def __str__(self):\n        return f\"House with {self.rooms} rooms, Garage: {self.garage}, Pool: {self.swimming_pool}\"\n\nclass HouseBuilder:\n    def __init__(self):\n        self.house = House()\n\n    def set_rooms(self, rooms):\n        self.house.rooms = rooms\n        return self\n\n    def add_garage(self):\n        self.house.garage = True\n        return self\n\n    def add_pool(self):\n        self.house.swimming_pool = True\n        return self\n\n    def build(self):\n        return self.house\n\n# Usage\nbuilder = HouseBuilder()\nluxury_house = builder.set_rooms(4).add_garage().add_pool().build()\nprint(luxury_house)  # Output: House with 4 rooms, Garage: True, Pool: True"}]},{"type":"heading","attrs":{"textAlign":"left","id":"heading-23","level":2},"content":[{"type":"text","text":"4. Strategy Pattern"}]},{"type":"bulletList","attrs":{"tight":true},"content":[{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Purpose"},{"type":"text","text":": Defines a family of algorithms, encapsulates each one, and makes them interchangeable at runtime."}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Key Use Cases"},{"type":"text","text":": Dynamic algorithm selection, e.g., different payment methods."}]}]}]},{"type":"codeBlock","attrs":{"language":"python","collapsed":false},"content":[{"type":"text","text":"from abc import ABC, abstractmethod\n\nclass PaymentStrategy(ABC):\n    @abstractmethod\n    def pay(self, amount):\n        pass\n\nclass CreditCardPayment(PaymentStrategy):\n    def __init__(self, card_number, card_expiry):\n        self.card_number = card_number\n        self.card_expiry = card_expiry\n\n    def pay(self, amount):\n        print(f\"Paying ${amount} using Credit Card ending in {self.card_number[-4:]}\")\n\nclass PayPalPayment(PaymentStrategy):\n    def __init__(self, email):\n        self.email = email\n\n    def pay(self, amount):\n        print(f\"Paying ${amount} using PayPal account {self.email}\")\n\nclass BitcoinPayment(PaymentStrategy):\n    def __init__(self, wallet_address):\n        self.wallet_address = wallet_address\n\n    def pay(self, amount):\n        print(f\"Paying ${amount} using Bitcoin wallet {self.wallet_address}\")\n\nclass ShoppingCart:\n    def __init__(self):\n        self.items = []\n        self.total_amount = 0\n\n    def add_item(self, item, price):\n        self.items.append(item)\n        self.total_amount += price\n\n    def pay(self, payment_strategy: PaymentStrategy):\n        payment_strategy.pay(self.total_amount)\n\n# Create a shopping cart\ncart = ShoppingCart()\ncart.add_item(\"Book\", 15)\ncart.add_item(\"Pen\", 5)\n\n# Pay using different strategies\ncart.pay(CreditCardPayment(\"1234-5678-9012-3456\", \"12/23\"))\ncart.pay(PayPalPayment(\"user@example.com\"))\ncart.pay(BitcoinPayment(\"1A2b3C4d5E6f7G8h9I0J\"))"}]},{"type":"heading","attrs":{"textAlign":"left","id":"heading-24","level":2},"content":[{"type":"text","text":"5. Observer Pattern"}]},{"type":"bulletList","attrs":{"tight":true},"content":[{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Purpose"},{"type":"text","text":": Defines a one-to-many dependency where multiple observers are notified of changes in the subject’s state."}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Key Use Cases"},{"type":"text","text":": Event-driven systems, like GUIs or notifications."}]}]}]},{"type":"codeBlock","attrs":{"language":"python","collapsed":false},"content":[{"type":"text","text":"class Subject:\n    def __init__(self):\n        self._observers = []\n\n    def add_observer(self, observer):\n        self._observers.append(observer)\n\n    def remove_observer(self, observer):\n        self._observers.remove(observer)\n\n    def notify_observers(self, data):\n        for observer in self._observers:\n            observer.update(data)\n\nfrom abc import ABC, abstractmethod\n\nclass Observer:\n    @abstractmethod\n    def update(self, data):\n        pass\n\nclass EmailObserver(Observer):\n    def update(self, data):\n        print(f\"Email Observer: Received data - {data}\")\n\nclass SMSObserver(Observer):\n    def update(self, data):\n        print(f\"SMS Observer: Received data - {data}\")\n\n# Usage\nsubject = Subject()\nemail_observer = EmailObserver()\nsms_observer = SMSObserver()\n\nsubject.add_observer(email_observer)\nsubject.add_observer(sms_observer)\n\nsubject.notify_observers(\"System Update Available!\")\n# Output:\n# Email Observer: Received data - System Update Available!\n# SMS Observer: Received data - System Update Available!"}]},{"type":"paragraph","attrs":{"textAlign":"left"}}]}