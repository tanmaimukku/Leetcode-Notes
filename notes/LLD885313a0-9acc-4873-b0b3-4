{"type":"doc","content":[{"type":"heading","attrs":{"textAlign":"left","id":"heading-1","level":2},"content":[{"type":"text","text":"Classes and Methods"}]},{"type":"heading","attrs":{"textAlign":"left","id":"heading-2","level":3},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Class Definition and Initialization"}]},{"type":"bulletList","attrs":{"tight":true},"content":[{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Classes"},{"type":"text","text":" are the blueprint for creating objects in Python."}]}]}]},{"type":"codeBlock","attrs":{"language":"python","collapsed":false},"content":[{"type":"text","text":"class MyClass:\n    def __init__(self, attribute1, attribute2):\n        self.attribute1 = attribute1  # Instance variable\n        self.attribute2 = attribute2\n\n# Creating an object\nobj = MyClass(\"value1\", \"value2\")"}]},{"type":"heading","attrs":{"textAlign":"left","id":"heading-3","level":3},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Instance Variables and Methods"}]},{"type":"bulletList","attrs":{"tight":true},"content":[{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Instance variables"},{"type":"text","text":" are specific to each object."}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Instance methods"},{"type":"text","text":" operate on instance variables."}]}]}]},{"type":"codeBlock","attrs":{"language":"python","collapsed":false},"content":[{"type":"text","text":"class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def greet(self):\n        return f\"Hello, my name is {self.name} and I am {self.age} years old.\"\n\n# Example usage\np = Person(\"Alice\", 25)\nprint(p.greet())  # Output: Hello, my name is Alice and I am 25 years old."}]},{"type":"heading","attrs":{"textAlign":"left","id":"heading-4","level":3},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Class Variables and Class Methods"}]},{"type":"bulletList","attrs":{"tight":true},"content":[{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Class variables"},{"type":"text","text":" are shared among all instances of a class."}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Class methods"},{"type":"text","text":" operate on class variables and are denoted with "},{"type":"text","marks":[{"type":"code"}],"text":"@classmethod"},{"type":"text","text":"."}]}]}]},{"type":"codeBlock","attrs":{"language":"python","collapsed":false},"content":[{"type":"text","text":"class Counter:\n    count = 0  # Class variable\n\n    @classmethod\n    def increment(cls):\n        cls.count += 1\n\n# Example usage\nCounter.increment()\nprint(Counter.count)  # Output: 1"}]},{"type":"heading","attrs":{"textAlign":"left","id":"heading-5","level":3},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Static Methods"}]},{"type":"bulletList","attrs":{"tight":true},"content":[{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Static methods"},{"type":"text","text":" do not operate on class or instance variables. They are utility functions within a class."}]}]}]},{"type":"codeBlock","attrs":{"language":"python","collapsed":false},"content":[{"type":"text","text":"class MathUtils:\n    @staticmethod\n    def add(a, b):\n        return a + b\n\n# Example usage\nprint(MathUtils.add(5, 3))  # Output: 8"}]},{"type":"heading","attrs":{"textAlign":"left","id":"heading-6","level":2},"content":[{"type":"text","text":"OOP Concepts"}]},{"type":"heading","attrs":{"textAlign":"left","id":"heading-7","level":3},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Inheritance"}]},{"type":"bulletList","attrs":{"tight":true},"content":[{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","text":"Use inheritance to create a hierarchy of classes."}]}]}]},{"type":"codeBlock","attrs":{"language":"python","collapsed":false},"content":[{"type":"text","text":"class Animal:\n    def speak(self):\n        return \"I make a sound\"\n\nclass Dog(Animal):  # Dog inherits from Animal\n    def speak(self):\n        return \"Woof!\"\n\n# Example usage\ndog = Dog()\nprint(dog.speak())  # Output: Woof!"}]},{"type":"heading","attrs":{"textAlign":"left","id":"heading-8","level":3},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Encapsulation"}]},{"type":"bulletList","attrs":{"tight":true},"content":[{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","text":"Use "},{"type":"text","marks":[{"type":"bold"}],"text":"private variables"},{"type":"text","text":" to restrict access to attributes."}]}]},{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","text":"Prefix variables with "},{"type":"text","marks":[{"type":"code"}],"text":"_"},{"type":"text","text":" (protected) or "},{"type":"text","marks":[{"type":"code"}],"text":"__"},{"type":"text","text":" (private)."}]}]}]},{"type":"codeBlock","attrs":{"language":"python","collapsed":false},"content":[{"type":"text","text":"class BankAccount:\n    def __init__(self, balance):\n        self.__balance = balance  # Private variable\n\n    def get_balance(self):\n        return self.__balance\n\n# Example usage\naccount = BankAccount(100)\nprint(account.get_balance())  # Output: 100"}]},{"type":"heading","attrs":{"textAlign":"left","id":"heading-9","level":3},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Polymorphism"}]},{"type":"bulletList","attrs":{"tight":true},"content":[{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","text":"Same interface but different implementations."}]}]}]},{"type":"codeBlock","attrs":{"language":"python","collapsed":false},"content":[{"type":"text","text":"class Animal:\n    def speak(self):\n        return \"Some sound\"\n\nclass Dog(Animal):\n    def speak(self):\n        return \"Woof!\"\n\nclass Cat(Animal):\n    def speak(self):\n        return \"Meow!\"\n\n# Example usage\nanimals = [Dog(), Cat()]\nfor animal in animals:\n    print(animal.speak())  # Output: Woof! Meow!"}]},{"type":"heading","attrs":{"textAlign":"left","id":"heading-10","level":3},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Abstraction"}]},{"type":"bulletList","attrs":{"tight":true},"content":[{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","text":"Use abstract classes to define methods that must be implemented in derived classes."}]}]}]},{"type":"codeBlock","attrs":{"language":"python","collapsed":false},"content":[{"type":"text","text":"from abc import ABC, abstractmethod\n\nclass Shape(ABC):\n    @abstractmethod\n    def area(self):\n        pass\n\nclass Rectangle(Shape):\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\n    def area(self):\n        return self.width * self.height\n\n# Example usage\nrect = Rectangle(5, 10)\nprint(rect.area())  # Output: 50"}]},{"type":"heading","attrs":{"textAlign":"left","id":"heading-11","level":2},"content":[{"type":"text","text":"Some Syntax Bits"}]},{"type":"heading","attrs":{"textAlign":"left","id":"heading-12","level":3},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Method Overloading (Default Arguments)"}]},{"type":"bulletList","attrs":{"tight":true},"content":[{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","text":"Python doesn't support true method overloading, but you can simulate it using default arguments."}]}]}]},{"type":"codeBlock","attrs":{"language":"python","collapsed":false},"content":[{"type":"text","text":"class Math:\n    def add(self, a, b=0, c=0):\n        return a + b + c\n\n# Example usage\nmath = Math()\nprint(math.add(5))        # Output: 5\nprint(math.add(5, 3))     # Output: 8\nprint(math.add(5, 3, 2))  # Output: 10"}]},{"type":"heading","attrs":{"textAlign":"left","id":"heading-13","level":3},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Method Overriding"}]},{"type":"bulletList","attrs":{"tight":true},"content":[{"type":"listItem","content":[{"type":"paragraph","attrs":{"textAlign":"left"},"content":[{"type":"text","text":"Redefine a method from the parent class in the child class."}]}]}]},{"type":"codeBlock","attrs":{"language":"python","collapsed":false},"content":[{"type":"text","text":"class Parent:\n    def greet(self):\n        return \"Hello from Parent\"\n\nclass Child(Parent):\n    def greet(self):\n        return \"Hello from Child\"\n\n# Example usage\nchild = Child()\nprint(child.greet())  # Output: Hello from Child"}]},{"type":"heading","attrs":{"textAlign":"left","id":"heading-14","level":2},"content":[{"type":"text","text":"Design Principles"}]},{"type":"paragraph","attrs":{"textAlign":"left"}}]}